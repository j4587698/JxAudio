@using System.Security.Claims
@using Microsoft.Extensions.Localization
@using JxAudio.Plugin
@using JxAudio.Web.Vo
@using Longbow.Tasks
@using Microsoft.AspNetCore.Components.Authorization
@using Avatar = Jx.Toolbox.Utils.Avatar
@inherits LayoutComponentBase
@implements IDisposable

@inject IStringLocalizer<MainLayout> Localizer
@inject NavigationManager NavigationManager
@inject IDispatchService<string> DispatchService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>@PageTitle</PageTitle>
<BootstrapBlazorRoot>
    <Layout SideWidth="0" IsPage="true" IsFullSide="true" IsFixedHeader="true" AdditionalAssemblies="new[] { GetType().Assembly }"
            ShowFooter="true" ShowCollapseBar="true" OnCollapsed="@OnCollapsed" Menus="MenuItems" OnClickMenu="OnClickMenu">
        <Header>
            <span class="ms-3 flex-sm-fill d-none d-sm-block">JxAudio</span>
            <div class="flex-fill d-sm-none">
            </div>
            @if (_scheduleVos.Count > 0)
            {
                <PopConfirmButton Icon="fas fa-spinner fa-pulse" ShowConfirmButton="false" ShowCloseButton="false">
                    <BodyTemplate>
                        <div class="d-flex align-items-center">
                        <table class="table table-striped table-hover">
                        @foreach(var scheduler in _scheduleVos)
                        {
                            <tr>
                                <td><span class="me-2">@scheduler.Name</span></td>
                                <td><span class="badge bg-secondary">正在运行</span></td>
                            </tr>
                        }
                        
                        </table>
                            
                        </div>
                    </BodyTemplate>
                </PopConfirmButton>
            }
            
            <ThemeProvider></ThemeProvider>
            <Logout ImageUrl="@(Avatar.GetAvatarUrl(_email) ?? "/Images/logo.png")" UserName="@(_username ?? "JxAudio")" DisplayName="@(_username ?? "JxAudio")">
                <LinkTemplate>
                    <LogoutLink Url="api/User/Logout"></LogoutLink>
                </LinkTemplate>
            </Logout>
        </Header>
        <Side>
            <div class="layout-banner">
                <img alt="logo" class="layout-logo" src="/Images/logo.png" />
                <div class="layout-title">
                    <span>JxAudio</span>
                </div>
            </div>
        </Side>
        <Main>
            <CascadingValue Value="this" IsFixed="true">
                @Body
            </CascadingValue>
        </Main>
    </Layout>

</BootstrapBlazorRoot>

@code
{
    /// <summary>
    ///获得/设置 是否收缩侧边栏
    /// </summary>
    public bool IsCollapsed { get; set; }

    private string? PageTitle { get; set; }
    
    private List<MenuItem>? MenuItems { get; set; }
    
    private string? _username;

    private string? _email;
    
    private List<IScheduler> _scheduleVos = new();

    private Task OnCollapsed(bool collapsed)
    {
        IsCollapsed = collapsed;
        return Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        PageTitle = "JxAudio";
        GetIconSideMenuItems();
        var nowPath = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).LocalPath;
        var menu = MenuItems!.FirstOrDefault(x => x.Url == nowPath);
        if (menu is not null)
        {
            PageTitle = menu.Text + "- JXAudio";
        }
        DispatchService.Subscribe(Notify);
        _scheduleVos = TaskServicesManager.ToList().Where(x => x.LastRunResult == TriggerResult.Running).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        _username = user.FindFirst(ClaimTypes.Name)?.Value;
        _email = user.FindFirst(ClaimTypes.Email)?.Value;
    }

    private Task Notify(DispatchEntry<string> payload)
    {
        if (payload.Name == "menu")
        {
            GetIconSideMenuItems();
            StateHasChanged();
        }
        else if (payload.Name == "task")
        {
            _scheduleVos = TaskServicesManager.ToList().Where(x => x.LastRunResult == TriggerResult.Running).ToList();
            StateHasChanged();
        }
        return Task.CompletedTask;
    }
    
    private void GetIconSideMenuItems()
    {
        MenuItems = new List<MenuItem>
        {
            new() { Text = Localizer["Home"], Icon = "fa fa-fw fa-home", Url = "/Admin", Match = NavLinkMatch.All} ,
            new() { Text = Localizer["User"], Icon = "fas fa-fw fa-clipboard-user", Url = "/Admin/UserManager", Match = NavLinkMatch.All} ,
            new() { Text = Localizer["Folder"], Icon = "fas fa-fw fa-folder", Url = "/Admin/FolderSelect", Match = NavLinkMatch.All} ,
            new() { Text = Localizer["Album"], Icon = "fas fa-fw fa-compact-disc", Url = "/Admin/AlbumManager", Match = NavLinkMatch.All } ,
            new() { Text = Localizer["Artist"], Icon = "fas fa-fw fa-microphone", Url = "/Admin/ArtistManager", Match = NavLinkMatch.All } ,
            new() { Text = Localizer["Genre"], Icon = "fas fa-fw fa-tags", Url = "/Admin/GenreManager", Match = NavLinkMatch.All } ,
            new() { Text = Localizer["Music"], Icon = "fas fa-fw fa-music", Url = "/Admin/MusicManager", Match = NavLinkMatch.All } ,
            new() { Text = Localizer["Playlist"], Icon = "fas fa-fw fa-clipboard-list", Url = "/Admin/PlaylistManager", Match = NavLinkMatch.All } ,
            new() { Text = Localizer["Task"], Icon = "fas fa-fw fa-list-check", Url = "/Admin/TaskManager", Match = NavLinkMatch.All } ,
            new() { Text = Localizer["Setting"], Icon = "fas fa-fw fa-cog", Url = "/Admin/SettingsManager", Match = NavLinkMatch.All } ,
            new() { Text = Localizer["Plugin"], Icon = "fas fa-fw fa-puzzle-piece", Url = "/Admin/PluginManager", Match = NavLinkMatch.All } 
        };
        var pluginMenus = PluginUtil.GetSystemPlugins().SelectMany(x => x.AddMenuItem() ?? new List<PluginMenuModel>()).ToList();
        if (pluginMenus.Any())
        {
            List<MenuItem> pluginMenuItems = new();
            foreach (var systemPlugin in pluginMenus)
            {
                pluginMenuItems.Add(new MenuItem(systemPlugin.DisplayName, 
                    $"/Admin/Plugin/{systemPlugin.MenuId}", systemPlugin.Icon));
            }
            MenuItems.Add(new MenuItem(Localizer["Plugin"], "/Admin/Plugin", "fas fa-fw fa-puzzle-piece")
            {
                Items = pluginMenuItems
            });
        }
    }

    private Task OnClickMenu(MenuItem arg)
    {
        PageTitle = arg.Text + " - JXAudio";
        StateHasChanged();
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        DispatchService.UnSubscribe(Notify);
    }
}
