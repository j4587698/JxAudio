@using System.Diagnostics.CodeAnalysis
@using JxAudio.Core
@using JxAudio.Core.Enums
@using JxAudio.Core.Options
@using JxAudio.Web.Validators
@inherits StepBase
@inject SwalService SwalService

<ValidateForm Model="@DbConfig" OnValidSubmit="@OnSubmit">
    <GroupBox class="install_content">
        <div class="row g-3">
            <div class="form-group col-12">
                <Select @bind-Value="DbConfig.DbType" Items="typeof(DbType).ToSelectList()" OnSelectedItemChanged="OnSelectedItemChanged"></Select>
            </div>
            <div class="form-group col-12" style="@(!_needShow ? "display: none" : "")">
                <BootstrapInput @bind-Value="@DbConfig.DbUrl" ValidateRules="@_validators">
                </BootstrapInput>
            </div>
            <div class="form-group col-12" style="@(!_needShow ? "display: none" : "")">
                <BootstrapInput @bind-Value="@DbConfig.DbPort" type="number" ValidateRules="@_validators">
                </BootstrapInput>
            </div>
            <div class="form-group col-12">
                <BootstrapInput @bind-Value="@DbConfig.DbName"></BootstrapInput>
            </div>
            <div class="form-group col-12" style="@(!_needShow ? "display: none" : "")">
                <BootstrapInput @bind-Value="@DbConfig.Username" ValidateRules="@_validators">
                </BootstrapInput>
            </div>
            <div class="form-group col-12" style="@(!_needShow ? "display: none" : "")">
                <BootstrapInput @bind-Value="@DbConfig.Password" type="password" ValidateRules="@_validators">
                </BootstrapInput>
            </div>
            <div class="form-group col-12">
                <BootstrapInput @bind-Value="@DbConfig.Prefix"></BootstrapInput>
            </div>
        </div>
    </GroupBox>
    <div class="text-center">
        <Button Text="上一步" OnClick="() => Prev?.Invoke()"></Button>
        <Button ButtonType="ButtonType.Submit">验证并继续</Button>
    </div>
</ValidateForm>

@code {
    [NotNull]
    private DbConfigOption? DbConfig { get; set; }
    
    private bool _needShow = false;

    private readonly List<IValidator> _validators = [new InstallValidator()];

    protected override void OnInitialized()
    {
        base.OnInitialized();
        DbConfig = new DbConfigOption(){DbType = "Sqlite", Prefix = "jx_", DbName = $"{Application.WebHostEnvironment.ContentRootPath}/config/JxAudio.db"};
    }
    
    private Task OnSubmit(EditContext arg)
    {

        Next?.Invoke();
        return Task.CompletedTask;
    }
    
    private Task OnSelectedItemChanged(SelectedItem arg)
    {
        if (Enum.TryParse(arg.Text, true, out DbType dbType))
        {
            switch (dbType)
            {
                case DbType.Sqlite:
                    _needShow = false;
                    DbConfig.DbUrl = null;
                    DbConfig.DbPort = null;
                    DbConfig.Username = null;
                    DbConfig.Password = null;
                    DbConfig.DbName = $"{Application.WebHostEnvironment.ContentRootPath}/config/JxPhotos.db";
                    break;
                case DbType.Mysql:
                    _needShow = true;
                    DbConfig.DbPort = "3306";
                    DbConfig.DbName = "JxPhotos";
                    break;
                case DbType.SqlServer:
                    _needShow = true;
                    DbConfig.DbPort = "1433";
                    DbConfig.DbName = "JxPhotos";
                    break;
                case DbType.Oracle:
                    _needShow = true;
                    DbConfig.DbPort = "1521";
                    DbConfig.DbName = "JxPhotos";
                    break;
                case DbType.Postgresql:
                    _needShow = true;
                    DbConfig.DbPort = "5432";
                    DbConfig.DbName = "JxPhotos";
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }
        return Task.CompletedTask;
    }

}