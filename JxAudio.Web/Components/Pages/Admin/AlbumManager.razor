@page "/Admin/AlbumManager"
@using JxAudio.Core.Entity
@using JxAudio.Core.Extensions
@inject DialogService DialogService

<AdminTable TItem="AlbumEntity" OnQueryAsync="OnQueryAsync">
    <TableColumns>
        <TableColumn @bind-Field="@context.PictureId" Width="50">
            <Template Context="value">
                <Avatar Url="@($"/api/Cover?coverId={value.Value}")"></Avatar>
            </Template>
        </TableColumn>
        <TableColumn @bind-Field="@context.Title" Searchable="true" Sortable="true" Filterable="true"></TableColumn>
        <TableColumn @bind-Field="@context.Year"></TableColumn>
        <TableColumn @bind-Field="@context.ArtistEntity">
            <Template Context="value">
                @if (value.Value != null)
                {
                    @value.Value.Name
                }
            </Template>
        </TableColumn>
        <TableColumn @bind-Field="@context.Count">
            <Template Context="value">
                <LinkButton OnClick="() => ShowTrack(value.Row)">@value.Value</LinkButton>
            </Template>
        </TableColumn>
    </TableColumns>
</AdminTable>

@code {

    private async Task<QueryData<AlbumEntity>> OnQueryAsync(QueryPageOptions option)
    {
        var select = AlbumEntity.Select.WhereDynamicFilter(option.ToDynamicFilter())
            .OrderByPropertyNameIf(option.SortOrder != SortOrder.Unset, option.SortName,
                option.SortOrder == SortOrder.Asc)
            .Include(x => x.ArtistEntity)
            .Count(out var count);
        if (option.IsPage)
        {
            select = select.Page(option.PageIndex, option.PageItems);
        }
        var items = await select.ToListAsync(x => new AlbumEntity()
        {
            ArtistEntity = x.ArtistEntity,
            Count = TrackEntity.Select.Where(y => y.AlbumId == x.Id).Count(),
            Title = x.Title,
            Id = x.Id,
            Year = x.Year,
            PictureId = x.PictureId
        });
        return new QueryData<AlbumEntity>()
        {
            TotalCount = (int)count,
            Items = items,
            IsSorted = option.SortOrder != SortOrder.Unset,
            IsFiltered = option.Filters.Any(),
            IsAdvanceSearch = option.AdvanceSearches.Any(),
            IsSearch = option.Searches.Any() || option.CustomerSearches.Any()
        };
    }

    public async Task ShowTrack(AlbumEntity albumEntity)
    {
        await DialogService.Show(new DialogOption()
        {
            Component = BootstrapDynamicComponent.CreateComponent<ShowTrackComponent>(new Dictionary<string, object?>()
            {
                [nameof(ShowTrackComponent.Id)] = albumEntity.Id,
                [nameof(ShowTrackComponent.TypeName)] = "album"
            })
        });
    }
}