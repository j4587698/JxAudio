@using JxAudio.Front.Enums
@using IconPark
@using Jx.Toolbox.Extensions
@using JxAudio.Front.Data
@using JxAudio.TransVo
@using Console = System.Console
@inherits BootstrapModuleComponentBase
@implements IDisposable
@inject IDispatchService<AddTrackMessage> DispatchService
@inject MessageService MessageService

@attribute [JSModuleAutoLoader("./Components/PlayerControl.razor.js", JSObjectReference = true)]

<div class="d-flex flex-column align-items-stretch w-100" style="height: 5rem">
    <input type="range" class="progress-slider" @bind-value="CurrentTimeString" 
           min="0" max="@Duration" step="1" @bind-value:event="oninput" style="background: linear-gradient(to right, var(--bb-header-bg) 0%, var(--bb-header-bg) @(Percent)%, #ddd @(Percent)%, #ddd 100%)">
    
    <div class="d-flex flex-grow-1 align-items-center">
        <div class="flex-1 hide-on-mobile">
            <div class="d-flex">
                <img alt="" src="favicon.png" class="w-11 h-11 rounded">
                <div class="ms-2 text-xs d-flex flex-column justify-content-between">
                    <div class="w-52 cursor-pointer text-truncate">
                        <div class="d-flex">
                            <span>@(CurrentTrack?.Title ?? "JxAudio")</span>
                            <div class="ms-2 text-secondary">@(CurrentTrack?.Artists == null ? "JxAudio" : string.Join(',', CurrentTrack.Artists.Select(x => x.Name)))</div>
                        </div>
                    </div>
                    <div class="d-flex gap-x-3">
                        <Like Size="18" StrokeWidth="3" Theme="ThemeType.Filled"></Like>
                    </div>
                </div>
            </div>
        </div>
        <div class="flex-1">
            <div class="d-flex align-items-center justify-content-center gap-x-3">
                <Button Color="Color.None" style="color: red" OnClick="LoopChanged">
                    @switch(_loopStatus)
                    {
                        case LoopStatus.LoopOnce:
                            <LoopOnce Size="20"></LoopOnce>
                            break;
                        case LoopStatus.PlayOnce:
                            <PlayOnce Size="20"></PlayOnce>
                            break;
                        case LoopStatus.ShuffleOne:
                            <ShuffleOne Size="20"></ShuffleOne>
                            break;
                    }
                </Button>
                <Button Color="Color.None">
                    <GoStart Size="28"></GoStart>
                </Button>
                <Button Color="Color.None" style="color: var(--bb-header-bg)" OnClick="Play" 
                        class="@(_playStatus == PlayStatus.Loading ? "rotating" : "")">
                    @switch (_playStatus)
                    {
                        case PlayStatus.Stop:
                        case PlayStatus.Pause:
                            <Play Size="45" Theme="ThemeType.Filled"></Play>
                            break;
                        case PlayStatus.Play:
                            <PauseOne Size="45" Theme="ThemeType.Filled"></PauseOne>
                            break;
                        case PlayStatus.Loading:
                            <LoadingFour Size="45" Theme="ThemeType.Filled"></LoadingFour>
                            break;
                    }
                </Button>
                <GoEnd Size="28"></GoEnd>
                <PopConfirmButton CustomClass="custom-popup" Placement="Placement.Top">
                    <BodyTemplate>
                        <div class="d-flex align-items-center">
                            <VolumeControl @bind-Volume="@Volume"></VolumeControl>
                        </div>
                    </BodyTemplate>
                    <ChildContent>
                        <VolumeSmall Size="20"></VolumeSmall>
                    </ChildContent>
                </PopConfirmButton>
                
                <Button Color="Color.None" class="show-on-mobile">
                    <MoreOne Size="20" StrokeWidth="3"></MoreOne>
                </Button>
                
            </div>
        </div>
        <div class="flex-1 hide-on-mobile">
            <div class="d-flex justify-content-end align-items-center gap-x-2-5">
                <span class="text-xs">
                    @CurrentTime.ToTimeString()[3..] / @Duration.ToTimeString()[3..]
                </span>
                <TextMessage Size="18"></TextMessage>
                <PopConfirmButton CustomClass="custom-popup" Placement="Placement.Top">
                    <BodyTemplate>
                        <PlayListControl TrackVos="_tracks" SelectedTrack="CurrentTrack" SelectedTrackChanged="SelectedTrackChanged"></PlayListControl>
                    </BodyTemplate>
                    <ChildContent>
                        <div class="d-flex align-items-center">
                            <MusicList Size="18" StrokeWidth="3"></MusicList>
                            <span class="text-xs">@_tracks.Count</span>
                        </div>
                    </ChildContent>
                </PopConfirmButton>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int CurrentTime { get; set; }

    [Parameter] public int Duration { get; set; }

    [Parameter]
    public EventCallback<int> CurrentTimeChanged { get; set; }

    private int Percent { get; set; }

    private int _volume = 100;

    private int Volume
    {
        get => _volume;
        set
        {
            if(_volume != value)
            {
                _volume = value;
                InvokeVoidAsync("setVolume", value / 100.0);
            }
        } 
    }

    private PlayStatus _playStatus = PlayStatus.Stop;

    private LoopStatus _loopStatus = LoopStatus.LoopOnce;

    private string CurrentTimeString
    {
        get => CurrentTime.ToString();
        set
        {
            if (value != CurrentTimeString)
            {
                CurrentTime = int.Parse(value); 
                Percent = CurrentTime * 100 / Duration;
                CurrentTimeChanged.InvokeAsync(CurrentTime);
                InvokeVoidAsync("setCurrentTime", CurrentTime);
            }
            
        }
    }
    
    private List<TrackVo> _tracks = new List<TrackVo>();

    private int _playIndex = 0;

    private TrackVo? CurrentTrack => _tracks.Count > _playIndex ? _tracks[_playIndex] : null;

    protected override Task InvokeInitAsync() => InvokeVoidAsync("init", Interop);

    [JSInvokable]
    public void OnTimeUpdate(double currentTime)
    {
        var time = (int) currentTime;
        if (CurrentTime != time)
        {
            CurrentTime = time;
            CurrentTimeChanged.InvokeAsync(time);
            Percent = CurrentTime * 100 / Duration;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task OnEnded()
    {
        _playStatus = PlayStatus.Stop;
        _playIndex = _loopStatus switch
        {
            LoopStatus.PlayOnce => _playIndex,
            LoopStatus.LoopOnce => _playIndex < _tracks.Count - 1 ? _playIndex + 1 : 0,
            LoopStatus.ShuffleOne => new Random().Next(0, _tracks.Count),
            _ => throw new ArgumentOutOfRangeException()
        };
        await PlayNow();
    }

    [JSInvokable]
    public void OnError(string error)
    {
        Console.WriteLine(error);
    }

    [JSInvokable]
    public void OnLoaded()
    {
        _playStatus = PlayStatus.Play;
        StateHasChanged();
    }

    [JSInvokable]
    public void OnPlaying()
    {
        _playStatus = PlayStatus.Play;
        StateHasChanged();
    }
    

    private async Task Play()
    {
        if (_playStatus == PlayStatus.Loading)
        {
            return;
        }

        if (_playStatus == PlayStatus.Play)
        {
            _playStatus = PlayStatus.Pause;
            await InvokeVoidAsync("playOrPause");
        }
        else if (_playStatus == PlayStatus.Pause)
        {
            _playStatus = PlayStatus.Play;
            await InvokeVoidAsync("playOrPause");
        }
        else if (_playStatus == PlayStatus.Stop)
        {
            await PlayNow();
        }
    }

    private async Task PlayNow()
    {
        if (CurrentTrack == null)
        {
            return;
        }
        _playStatus = PlayStatus.Loading;
        Duration = (int)CurrentTrack.Duration;
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
        await InvokeVoidAsync("play", CurrentTrack.Id, CurrentTrack.MimeType);
    }

    private async Task Notify(DispatchEntry<AddTrackMessage> entry)
    {
        if (entry.Entry != null)
        {
            var message = entry.Entry;
            if (message is { Type: "add", Tracks: not null })
            {
                _tracks.AddRange(message.Tracks);
                if (_playStatus == PlayStatus.Stop)
                {
                    await PlayNow();
                }
            }
            else if (message is { Type: "replace", Tracks: not null })
            {
                _tracks = message.Tracks;
                if (_loopStatus == LoopStatus.ShuffleOne)
                {
                    _playIndex = new Random().Next(0, _tracks.Count);
                }
                else
                {
                    _playIndex = 0;
                }
                _playIndex = 0;
                await PlayNow();
            }
            StateHasChanged();
        }
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        DispatchService.Subscribe(Notify);
    }

    public void Dispose()
    {
        DispatchService.UnSubscribe(Notify);
    }

    private async Task LoopChanged()
    {
        switch (_loopStatus)
        {
            case LoopStatus.PlayOnce:
                _loopStatus = LoopStatus.LoopOnce;
                await MessageService.Show(new MessageOption()
                {
                    Content = "单曲循环"
                });
                break;
            case LoopStatus.LoopOnce:
                _loopStatus = LoopStatus.ShuffleOne;
                await MessageService.Show(new MessageOption()
                {
                    Content = "列表循环"
                });
                break;
            case LoopStatus.ShuffleOne:
                _loopStatus = LoopStatus.PlayOnce;
                await MessageService.Show(new MessageOption()
                {
                    Content = "随机播放"
                });
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    private async Task SelectedTrackChanged(TrackVo track)
    {
        var index = _tracks.IndexOf(track);
        if (index != -1)
        {
            _playIndex = index;
            await PlayNow();
        }
    }

}