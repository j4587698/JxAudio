@using Jx.Toolbox.Extensions
@using JxAudio.Front.Data
@using JxAudio.TransVo
@using Microsoft.Extensions.Localization
@inject IDispatchService<AddTrackMessage> DispatchService
@inject IStringLocalizer<TrackTable> StringLocalizer

<Table TItem="TrackVo" Items="Tracks" IsBordered="true" IsStriped="true" ShowExtendButtons="true" 
       ShowExtendEditButton="false" ShowExtendDeleteButton="false" ShowToolbar="true" ShowDefaultButtons="false">
    <TableColumns>
        <TableColumn @bind-Field="@context.Title"></TableColumn>
        <TableColumn @bind-Field="@context.Artists">
            <Template Context="value">
                @if (value.Value != null)
                {
                    @foreach (var artist in value.Value)
                    {
                        <LinkButton Url="@($"/Artist/{artist.Id}")">@artist.Name</LinkButton>
                        @:&nbsp;
                    }
                }
            </Template>
        </TableColumn>
        <TableColumn @bind-Field="@context.Album">
            <Template Context="value">
                @if (value.Value != null)
                {
                    <LinkButton Url="@($"/Album/{value.Value.Id}")">@value.Value.Title</LinkButton>
                }
                else
                {
                    @:未知专辑
                }
            </Template>
        </TableColumn>
        <TableColumn @bind-Field="@context.Name" Text="音频格式">
            <Template Context="value">
                @Path.GetExtension(value.Value!)[1..].ToUpper()
            </Template>
        </TableColumn>
        <TableColumn @bind-Field="@context.BitRate"></TableColumn>
        <TableColumn @bind-Field="@context.Size">
            <Template Context="value">
                @value.Value.ToSizeString()
            </Template>
        </TableColumn>
        <TableColumn @bind-Field="@context.Duration">
            <Template Context="value">
                @value.Value.ToTimeString()
            </Template>
        </TableColumn>
    </TableColumns>
    <RowButtonTemplate>
        <TableCellButton Icon="fa fa-play" OnClick="() => Play(context)" IsShow="ShowDefaultButton"></TableCellButton>
        <TableCellButton Icon="fa fa-plus" OnClick="() => AddToList(context)" IsShow="ShowDefaultButton"></TableCellButton>
        @TrackButton?.Invoke(context)
    </RowButtonTemplate>
    <TableToolbarTemplate>
        <TableToolbarButton Text="@StringLocalizer["PlayAll"]" Icon="fa fa-play" OnClickWithoutRender="PlayAll" IsShow="ShowDefaultToolbar"></TableToolbarButton>
        @ToolbarButtons
    </TableToolbarTemplate>
</Table>

@code {
    [Parameter]
    public List<TrackVo>? Tracks { get; set; }

    [Parameter]
    public RenderFragment<TrackVo>? TrackButton { get; set; }

    [Parameter] public bool ShowDefaultButton { get; set; } = true;

    [Parameter] public bool ShowDefaultToolbar { get; set; } = true;

    [Parameter]
    public RenderFragment? ToolbarButtons { get; set; }

    private void Play(TrackVo trackVo)
    {
        DispatchService.Dispatch(new DispatchEntry<AddTrackMessage>()
        {
            Entry = new AddTrackMessage()
            {
                Tracks = [trackVo],
                Type = "replace"
            }
        });
    }

    private void AddToList(TrackVo trackVo)
    {
        DispatchService.Dispatch(new DispatchEntry<AddTrackMessage>()
        {
            Entry = new AddTrackMessage()
            {
                Tracks = [trackVo],
                Type = "add"
            }
        });
    }

    private Task PlayAll()
    {
        if (Tracks is { Count: > 0 })
        {
            DispatchService.Dispatch(new DispatchEntry<AddTrackMessage>()
            {
                Entry = new AddTrackMessage()
                {
                    Tracks = Tracks,
                    Type = "replace"
                }
            });
        }
        return Task.CompletedTask;
    }

}