@page "/Albums"
@using Jx.Toolbox.Extensions
@using JxAudio.TransVo
@using JxAudio.Front.Data
@using JxAudio.Front.Filter

@inject HttpClient Http
@inject IDispatchService<AddTrackMessage> DispatchService

<PageTitle>专辑</PageTitle>

<FrontTable TItem="AlbumVo" ShowToolbar="true" ShowDefaultButtons="false" ShowExtendButtons="true"
            ShowExtendDeleteButton="false" ShowExtendEditButton="false" OnQueryAsync="OnQueryAsync">
    <TableColumns>
        <TableColumn @bind-Field="@context.CoverId" Width="40">
            <Template Context="value">
                <Avatar Url="@($"/api/Cover?coverId={value.Value}")"></Avatar>
            </Template>
        </TableColumn>
        <TableColumn @bind-Field="@context.Title" Searchable="true" Sortable="true" Filterable="true">
            <Template Context="value">
                <LinkButton Text="@value.Value" Url=@($"/Album/{value.Row.Id}")></LinkButton>
            </Template>
        </TableColumn>
        <TableColumn @bind-Field="@context.Artist" Searchable="true" Sortable="true" Filterable="true">
            <FilterTemplate>
                <ArtistFilter></ArtistFilter>
            </FilterTemplate>
            <Template Context="value">
                <LinkButton >@value.Value.Name</LinkButton>
            </Template>
        </TableColumn>
        <TableColumn @bind-Field="@context.Count"></TableColumn>
        <TableColumn @bind-Field="@context.TotalSize">
            <Template Context="value">
                @value.Value.ToSizeString()
            </Template>
        </TableColumn>
    </TableColumns>
    <RowButtonTemplate>
        <TableCellButton Icon="fa fa-play" OnClick="() => PlayAll(context)"></TableCellButton>
        <TableCellButton Icon="fa fa-plus" OnClick="() => AddToPlayList(context)"></TableCellButton>
    </RowButtonTemplate>
</FrontTable>

@code {
    

    private async Task<QueryData<AlbumVo>> OnQueryAsync(QueryPageOptions queryPageOptions)
    {
        QueryOptionsVo queryOptionsVo = new QueryOptionsVo();
        queryOptionsVo.SortName = queryPageOptions.SortName.ToFieldName();
        queryOptionsVo.DynamicFilterInfo = queryPageOptions.ToDynamicFilter();
        queryOptionsVo.SortOrder = (int)queryPageOptions.SortOrder;
        queryOptionsVo.IsPage = queryPageOptions.IsPage;
        queryOptionsVo.PageIndex = queryPageOptions.PageIndex;
        queryOptionsVo.PageItems = queryPageOptions.PageItems;
        var responseMessage = await Http.PostAsJsonAsync("/api/Album", queryOptionsVo);
        var vo = await responseMessage.Content.ReadFromJsonAsync<QueryData<AlbumVo>>();
        if (vo == null)
        {
            return new QueryData<AlbumVo>();
        }

        return vo;
    }

    private async Task PlayAll(AlbumVo albumVo)
    {
        var responseMessage = await Http.GetAsync($"/api/Album/AllTracks?albumId={albumVo.Id}");
        var tracks = await responseMessage.Content.ReadFromJsonAsync<List<TrackVo>>();
        if (tracks != null)
        {
            DispatchService.Dispatch(new DispatchEntry<AddTrackMessage>()
            {
                Entry = new AddTrackMessage()
                {
                    Tracks = tracks,
                    Type = "replace"
                }
            });
        }
    }

    private async Task AddToPlayList(AlbumVo albumVo)
    {
        var responseMessage = await Http.GetAsync($"/api/Album/AllTracks?albumId={albumVo.Id}");
        var tracks = await responseMessage.Content.ReadFromJsonAsync<List<TrackVo>>();
        if (tracks != null)
        {
            DispatchService.Dispatch(new DispatchEntry<AddTrackMessage>()
            {
                Entry = new AddTrackMessage()
                {
                    Tracks = tracks,
                    Type = "add"
                }
            });
        }
    }

}