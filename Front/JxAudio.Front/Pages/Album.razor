@page "/Album"
@using Jx.Toolbox.Extensions
@using JxAudio.TransVo
@using JxAudio.Front.Components
@using JxAudio.Front.Filter
@using Console = System.Console

@inject HttpClient Http

<PageTitle>专辑</PageTitle>

<FrontTable TItem="AlbumVo" ShowToolbar="true" ShowDefaultButtons="false" ShowExtendButtons="true"
            ShowExtendDeleteButton="false" ShowExtendEditButton="false" OnQueryAsync="OnQueryAsync">
    <TableColumns>
        <TableColumn @bind-Field="@context.CoverId" Width="40">
            <Template Context="value">
                <Avatar Url="@($"/api/Cover?coverId={value.Value}")"></Avatar>
            </Template>
        </TableColumn>
        <TableColumn @bind-Field="@context.Title" Searchable="true" Sortable="true" Filterable="true"></TableColumn>
        <TableColumn @bind-Field="@context.ArtistName" Searchable="true" Sortable="true" Filterable="true"></TableColumn>
        <TableColumn @bind-Field="@context.Count"></TableColumn>
        <TableColumn @bind-Field="@context.TotalSize">
            <Template Context="value">
                @value.Value.ToSizeString()
            </Template>
        </TableColumn>
    </TableColumns>
    <RowButtonTemplate>
        <TableCellButton Text="全部播放" Icon="fa fa-play" OnClick="() => PlayAll(context)"></TableCellButton>
    </RowButtonTemplate>
</FrontTable>

@code {
    

    private async Task<QueryData<AlbumVo>> OnQueryAsync(QueryPageOptions queryPageOptions)
    {
        queryPageOptions.SortName = queryPageOptions.SortName.ToFieldName();
        var responseMessage = await Http.PostAsJsonAsync("/api/Album", 
            new {DynamicFilterInfo = queryPageOptions.ToDynamicFilter(), QueryPageOptions = queryPageOptions});
        var vo = await responseMessage.Content.ReadFromJsonAsync<QueryData<AlbumVo>>();
        if (vo == null)
        {
            return new QueryData<AlbumVo>();
        }

        return vo;
    }

    private void PlayAll(AlbumVo albumVo)
    {
        
    }

}